name: Auto Collect RSS News

on:
  # 每8小时运行一次
  schedule:
    - cron: '0 */8 * * *'
  # 允许手动触发
  workflow_dispatch:

jobs:
  collect-news:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install rss-parser axios entities

      - name: Collect RSS feeds
        env:
          QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        run: |
          cat > collect-rss.js << 'EOF'
          const Parser = require('rss-parser');
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const { decode } = require('entities');
          
          const parser = new Parser({
            customFields: {
              item: ['content:encoded', 'content']
            },
            requestOptions: {
              headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36'
              },
              timeout: 15000
            }
          });
          
          const QWEN_API_KEY = process.env.QWEN_API_KEY;

          // 使用通义千问进行翻译
          async function translateTextWithQwen(text) {
            if (!QWEN_API_KEY || !text || !text.trim()) {
              if (!QWEN_API_KEY) console.log('Qwen: API Key 未配置，跳过翻译。');
              return null;
            }
            
            const url = 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation';
            const payload = {
              model: 'qwen-mt-plus',
              input: {
                messages: [
                  {
                    role: 'user',
                    content: text.substring(0, 2000)
                  }
                ]
              },
              parameters: {
                result_format: 'message',
                translation_options: {
                  source_lang: 'Vietnamese',
                  target_lang: 'Chinese'
                }
              }
            };

            try {
              console.log(`Qwen: 准备翻译 -> "${text.substring(0, 50)}..."`);
              const resp = await axios.post(url, payload, {
                headers: {
                  'Authorization': `Bearer ${QWEN_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                timeout: 45000
              });

              if (resp.data && resp.data.output && resp.data.output.choices && resp.data.output.choices.length > 0) {
                const translatedText = resp.data.output.choices[0].message.content;
                if (translatedText && translatedText.trim()) {
                  return translatedText.trim();
                }
              }
              console.error('Qwen 翻译失败: 响应格式不正确', JSON.stringify(resp.data));
              return null;
            } catch (e) {
              console.error('Qwen 翻译失败:', e.response?.status, e.message);
              if (e.response?.data) console.error('错误详情:', JSON.stringify(e.response.data));
              return null;
            }
          }
          
          // RSS源配置
          const feeds = [
            {
              url: 'https://thanhnien.vn/rss/kinh-te.rss',
              source: 'Thanh Nien Kinh Te',
              category: 'market-analysis'
            },
            {
              url: 'https://tuoitre.vn/rss/kinh-doanh.rss', // 使用Tuoi Tre的商业版块
              source: 'Tuoi Tre Kinh Doanh',
              category: 'investment-news'
            },
            {
              url: 'https://vietnamnet.vn/kinh-doanh.rss', // 修复重定向问题
              source: 'VietnamNet',
              category: 'industry-insights'
            },
            {
              url: 'https://thanhnien.vn/rss/chinh-tri.rss', // 更改为政治类别以获取政策相关内容
              source: 'Thanh Nien Chinh Tri',
              category: 'vietnam-policy'
            }
          ];
          
          // 越南投资相关关键词 - 扩展并优化关键词列表
          const keywords = [
            // 国家和语言
            'vietnam', 'việt nam', 'vietnamese', 'hanoi', 'ho chi minh', 'saigon', 'hochiminh',
            
            // 投资相关
            'investment', 'invest', 'investor', 'investing', 'capital', 'funding', 'venture',
            'đầu tư', 'vốn', 'tài chính', 'tín dụng', 'cho vay', 'dự án',
            
            // 经济和市场
            'economy', 'economic', 'economist', 'kinh tế', 'kinh te', 'gdp', 'inflation', 'growth',
            'market', 'thị trường', 'thi truong', 'stock', 'equity', 'trading', 'trade',
            'business', 'doanh nghiệp', 'doanh nghiep', 'company', 'corporate',
            
            // 政策和法规
            'policy', 'policies', 'regulation', 'regulatory', 'law', 'legal', 'chính sách', 'chinh sach',
            'government', 'governmental', 'state', 'federal', 'central bank', 'ngân hàng', 'ngan hang',
            'monetary', 'fiscal', 'tax', 'thuế', 'thue',
            
            // 行业特定
            'bank', 'banking', 'ngân hàng', 'ngan hang', 'finance', 'financial',
            'real estate', 'bất động sản', 'bat dong san', 'property', 'housing',
            'technology', 'công nghệ', 'cong nghe', 'tech', 'startup', 'innovation',
            'manufacturing', 'manufacture', 'sản xuất', 'san xuat',
            'export', 'xuất khẩu', 'xuat khau', 'import', 'nhập khẩu', 'nhap khau',
            'tourism', 'du lịch', 'du lich', 'hospitality',
            'agriculture', 'nông nghiệp', 'nong nghiep', 'farming',
            
            // 特定术语
            'FDI', 'foreign direct investment', 'OECD', 'ASEAN', 'APEC', 'TPP', 'RCEP',
            'exchange rate', 'currency', 'dong', 'VNĐ', 'VND',
            'stock exchange', 'stock market', 'HOSE', 'HNX', 'UPCOM'
          ];
          
          // 检查文章是否与投资相关
          function isInvestmentRelated(title, content) {
            const text = (title + ' ' + content).toLowerCase();
            return keywords.some(keyword => text.includes(keyword.toLowerCase()));
          }
          
          // 生成文章slug
          function generateSlug(title) {
            return title
              .toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/[\s_-]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .substring(0, 50);
          }
          
          // 获取分类标签
          function getCategoryTags(category) {
            const tagMap = {
              'vietnam-policy': ['vietnam', 'policy', 'government', 'regulation'],
              'market-analysis': ['market', 'analysis', 'economy', 'trend'],
              'investment-news': ['investment', 'finance', 'funding', 'capital'],
              'industry-insights': ['industry', 'business', 'innovation', 'growth']
            };
            return tagMap[category] || ['vietnam', 'news'];
          }
          
          // 生成Markdown内容（支持双语）
          function generateMarkdownContent(item, feedSource, category, zhTitle, zhContent, originalDecodedTitle, originalDecodedContent) {
            const date = new Date();
            const slug = generateSlug(zhTitle || originalDecodedTitle);
            const timePart = String(date.getHours()).padStart(2,'0') + String(date.getMinutes()).padStart(2,'0') + String(date.getSeconds()).padStart(2,'0');
            const filename = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0') + '-' + timePart + '-' + slug + '.md';
            
            const tags = getCategoryTags(category);
            const cleanContent = originalDecodedContent.substring(0, 2000);
            
            const titleEsc = (zhTitle || originalDecodedTitle).replace(/"/g, '\\"');
            const excerptBase = (zhContent || cleanContent).replace(/"/g, '\\"').substring(0, 200);
            
            const markdownContent = '---\n' +
              'layout: post\n' +
              'title: "' + titleEsc + '"\n' +
              'date: ' + date.toISOString().replace('T', ' ').replace(/\.\d{3}Z/, ' +0700') + '\n' +
              'category: ' + category + '\n' +
              'tags: ' + JSON.stringify(tags) + '\n' +
              'source_url: "' + item.link + '"\n' +
              'author: "seacall Team"\n' +
              'excerpt: "' + excerptBase + '..."\n' +
              'featured: false\n' +
              'keywords: "' + tags.join(', ') + '"\n' +
              'lang: vi\n' +
              (zhContent ? 'translated: true\ntranslated_lang: zh-Hans\n' : 'translated: false\n') +
              '---\n\n' +
              (zhContent ? '## 中文译文\n\n' + zhContent + '\n\n---\n\n' : '') +
              '## 原文（越南语）\n\n' + cleanContent + '\n\n' +
              '## 相关信息\n\n' +
              '- **原文链接**：[查看完整新闻](' + item.link + ')\n' +
              '- **新闻来源**：' + feedSource + '\n' +
              '- **发布时间**：' + new Date(item.pubDate || date).toLocaleDateString('zh-CN') + '\n\n' +
              '*想要获取更专业的投资分析和建议？欢迎体验 seacall AI 投资顾问服务。*';
            
            return { filename, content: markdownContent };
          }
          
          async function collectNews() {
            console.log('开始采集RSS新闻...');
            let totalCollected = 0;
            let totalSkipped = 0;
            
            for (const feed of feeds) {
              try {
                console.log(`正在采集: ${feed.url} (${feed.source})`);
                const parsed = await parser.parseURL(feed.url);
                console.log(`成功获取RSS源: ${feed.url}, 文章数量: ${parsed.items.length}`);
                
                // 增加到每个源最多取5篇
                const items = parsed.items.slice(0, 5);
                let feedCollected = 0;
                let feedSkipped = 0;
                
                for (const item of items) {
                  try {
                    // 解码HTML实体
                    const decodedTitle = decode(item.title || '');
                    const rawTextWithEntities = (item['content:encoded'] || item.content || item.contentSnippet || '').replace(/<[^>]*>/g, ' ');
                    const decodedRawText = decode(rawTextWithEntities);

                    // 检查是否与投资相关
                    if (isInvestmentRelated(decodedTitle, decodedRawText)) {
                      let zhTitle = null, zhContent = null;
                      
                      // 使用通义千问翻译
                      console.log(`🔄 正在使用 Qwen 翻译: ${decodedTitle.substring(0, 30)}...`);
                      zhTitle = await translateTextWithQwen(decodedTitle);
                      const viContentForTrans = decodedRawText.substring(0, 1500);
                      zhContent = await translateTextWithQwen(viContentForTrans);
                      
                      if (zhTitle) console.log(`✅ 标题翻译完成`);
                      if (zhContent) console.log(`✅ 内容翻译完成`);
                      
                      const { filename, content } = generateMarkdownContent(item, feed.source, feed.category, zhTitle, zhContent, decodedTitle, decodedRawText);
                      const filePath = path.join('_posts', filename);
                      
                      // 检查文件是否已存在
                      if (!fs.existsSync(filePath)) {
                        fs.writeFileSync(filePath, content, 'utf8');
                        console.log(`✅ 已创建: ${filename}`);
                        feedCollected++;
                        totalCollected++;
                      } else {
                        console.log(`ℹ️ 已存在: ${filename}`);
                        feedSkipped++;
                        totalSkipped++;
                      }
                    } else {
                      console.log(`⏭️ 跳过不相关文章: ${item.title.substring(0, 50)}...`);
                      feedSkipped++;
                      totalSkipped++;
                    }
                  } catch (itemError) {
                    console.error(`❌ 处理文章时出错: ${item.title}`, itemError.message);
                    feedSkipped++;
                    totalSkipped++;
                  }
                }
                
                console.log(`📊 ${feed.source} 采集完成: 新增 ${feedCollected} 篇, 跳过 ${feedSkipped} 篇`);
              } catch (error) {
                console.error(`❌ 采集 ${feed.url} 时出错:`, error.message);
              }
            }
            
            console.log(`🎉 RSS采集完成: 总计新增 ${totalCollected} 篇, 跳过 ${totalSkipped} 篇`);
          }
          
          collectNews().catch(console.error);
          EOF
          
          node collect-rss.js

      - name: Commit new posts
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _posts/
          if ! git diff --staged --quiet; then
            git commit -m "🤖 Auto: Add RSS news posts [$(date +'%Y-%m-%d %H:%M')]"
            git push
            echo "✅ 新文章已自动发布"
          else
            echo "ℹ️ 没有新文章需要发布"
          fi

      - name: Create summary
        run: |
          echo "## RSS Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Executed at (UTC): $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- New posts: $(git diff HEAD~1 --name-only --diff-filter=A | grep '^_posts/' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Site: https://news.seacall.com" >> $GITHUB_STEP_SUMMARY